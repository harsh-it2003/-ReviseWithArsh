class Solution {
private:
    int m,n;
public:
    int calFor(int i,int j,int k,vector<vector<int>>&grid){
        if(j-k<0 || j+k>=n || i+2*k>=m)
            return -1;
        else{
            int ans=0;
            for(int l=0;l<=k;l++){
                ans+=grid[i+l][j-l];
                ans+=grid[i+l][j+l];
            }

            for(int l=i+2*k;l>i+k;l--){
                ans+=grid[l][j-(l-(i+2*k))];
                ans+=grid[l][j+(l-(i+2*k))];
            }
            ans-=(grid[i][j]+grid[i+2*k][j]);
            return ans;
        }
    }



    vector<int> getBiggestThree(vector<vector<int>>& grid) {
        set<int>ans;
        m=grid.size();
        n=grid[0].size();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<=(m-1)/2;k++){
                    int temp=grid[i][j];
                    if(k)
                        temp=calFor(i,j,k,grid);
                    if(temp==-1)
                        break;
                    ans.insert(temp);
                    if(ans.size()>3)
                        ans.erase(ans.begin());
                }
            }
        }

        vector<int>realAns;
        for(auto x:ans)
            realAns.push_back(x);

        sort(realAns.begin(),realAns.end(),greater<int>());

        return realAns;

    }
};