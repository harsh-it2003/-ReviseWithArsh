class Solution {
private:
    vector<vector<vector<double>>>dp;


public:
    double prob(int i,int j,int moves,int n){
        if(moves==0 || dp[i][j][moves]!=-1){
            return dp[i][j][moves];
        }
        else{
            double ans=0;
            ans+=1.0/8*(i-1>=0 && j+2<n ?prob(i-1,j+2,moves-1,n):0);
            ans+=1.0/8*(i-1>=0 && j-2>=0 ?prob(i-1,j-2,moves-1,n):0);
            ans+=1.0/8*(i-2>=0 && j-1>=0 ?prob(i-2,j-1,moves-1,n):0);
            ans+=1.0/8*(i-2>=0 && j+1<n ?prob(i-2,j+1,moves-1,n):0);
            ans+=1.0/8*(i+2<n && j+1<n ?prob(i+2,j+1,moves-1,n):0);
            ans+=1.0/8*(i+2<n && j-1>=0 ?prob(i+2,j-1,moves-1,n):0);
            ans+=1.0/8*(i+1<n && j-2>=0 ?prob(i+1,j-2,moves-1,n):0);
            ans+=1.0/8*(i+1<n && j+2<n ?prob(i+1,j+2,moves-1,n):0);
            return dp[i][j][moves]=ans;
        }

    }


    double knightProbability(int n, int k, int r, int c) {
        double ans=0;
        dp.resize(n,vector<vector<double>>(n,vector<double>(k+1,-1)));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                dp[i][j][0]=0;
            }
        }
        dp[r][c][0]=1;

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                ans+=prob(i,j,k,n);
            }
        }

        return ans;
    }
};