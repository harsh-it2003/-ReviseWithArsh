class Solution {
private:
    set<vector<int>>rectsInside;
    set<pair<int,int>>rectsRange;

public:

    int rangesOverlap(pair<int,int>a,pair<int,int>b){
        if(a.first>b.first)
            swap(a,b);
        return ((b.first>=a.first && b.first<a.second));
    }

    int overlaps(vector<int>&rec){
        auto it=rectsRange.lower_bound({rec[1],INT_MIN});
        if(it!=rectsRange.end() && rangesOverlap({rec[1],rec[3]},*it)){
                return 1;
        }
        if(it==rectsRange.begin())
            return 0;
        it--;
        if(rangesOverlap({rec[1],rec[3]},*it)){
            return 1;
        }
        return 0; 
    }

    long long findArea(vector<int>&v){
        return (long long)(abs(v[2]-v[0])*abs(v[1]-v[3]));
    }


    int liesInside(vector<int>&rec1,vector<int>&rec2){
        return (rec1[0]>=rec2[0] && rec1[0]<=rec2[2] && rec1[2]>=rec2[0] && rec1[2]<=rec2[2] && rec1[1]>=rec2[1] && rec1[1]<=rec2[3] && rec1[3]>=rec2[1] && rec1[3]<=rec2[3]);
    }

    int righterAndTopper(pair<int,int>a,pair<int,int>b){
        if(a.first>b.first)
            return 1;
        else if(a.first==b.first){
            return (a.second>=b.second);
        }
        else
            return 0;
    }


    int allRecsLieInsideTheBoxAndEqualAreaToTheBox(vector<vector<int>>rectangles){
        vector<int>box={rectangles[0][0],rectangles[0][1],INT_MIN,INT_MIN};

        for(auto x:rectangles){
            if(righterAndTopper({x[2],x[3]},{box[2],box[3]})){
                box[2]=x[2];
                box[3]=x[3];
            }
        }

        long long recsArea=0,boxArea=findArea(box);

        for(auto x:rectangles){
            if(liesInside(x,box)){
                recsArea+=findArea(x);
            }
            else
                return 0;
        }

        return (recsArea==boxArea);

    }



    bool isRectangleCover(vector<vector<int>>& rectangles) {
        int n=rectangles.size();
        sort(rectangles.begin(),rectangles.end());

        for(int i=0;i<n;i++){
            while(!rectsInside.empty() && (*rectsInside.begin())[0]<=rectangles[i][0]){
                auto it=rectsInside.begin();
                rectsRange.erase({(*it)[1],(*it)[2]});
                rectsInside.erase(it);
            }

            if(!overlaps(rectangles[i])){
                rectsRange.insert({rectangles[i][1],rectangles[i][3]});
                rectsInside.insert({rectangles[i][2],rectangles[i][1],rectangles[i][3]});
            }
            else{
                return 0;
            }
        }

        return allRecsLieInsideTheBoxAndEqualAreaToTheBox(rectangles);

    }
};
