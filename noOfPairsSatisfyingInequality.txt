class Solution {
public:
     int lessThanEqualTo(int k,vector<int>&v){
        int l=0,h=(int)v.size()-1;

        while(l<=h){
            int m=(l+h)/2;
            if(v[m]>k)
                h=m-1;
            else
                l=m+1;
        }

        return l;
    }



    long long numberOfPairsFor(int l,int h,vector<int>&v,int diff){
        if(l==h)
            return 0ll;
        int mid=(l+h)/2;
        long long ans=numberOfPairsFor(l,mid,v,diff);
        vector<int>temp;
        for(int i=l;i<=mid;i++)
            temp.push_back(v[i]);

        sort(temp.begin(),temp.end());

        for(int i=mid+1;i<=h;i++){
            ans+=lessThanEqualTo(v[i]+diff,temp);
        }

        ans+=numberOfPairsFor(mid+1,h,v,diff);

        return ans;

    }



    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        int n=nums1.size();
        vector<int>v=nums1;
        for(int i=0;i<n;i++){
            v[i]-=nums2[i];
        }

        return numberOfPairsFor(0,n-1,v,diff);
    }
};
