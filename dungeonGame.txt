class Solution {
private:
    int m,n;
    vector<vector<int>>dp;
public:
    int fun(int i,int j,vector<vector<int>>&dungeon){
        if(i==m-1 || j==n-1 || dp[i][j]!=-1)
            return dp[i][j];
        else{
            int minn=min(fun(i,j+1,dungeon),fun(i+1,j,dungeon));
            int ans=(dungeon[i][j]<0?minn+abs(dungeon[i][j]):max(1,minn-dungeon[i][j]));
            return dp[i][j]=ans;
        }
    }


    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        m=dungeon.size();
        n=dungeon[0].size();
        dp.resize(m,vector<int>(n,-1));

        dp[m-1][n-1]=(dungeon[m-1][n-1]<0?abs(dungeon[m-1][n-1])+1:1);

        for(int j=n-2;j>=0;j--){
            dp[m-1][j]=(dungeon[m-1][j]<0?abs(dungeon[m-1][j])+dp[m-1][j+1]:max(1,dp[m-1][j+1]-dungeon[m-1][j]));
        }

        for(int i=m-2;i>=0;i--){
            dp[i][n-1]=(dungeon[i][n-1]<0?abs(dungeon[i][n-1])+dp[i+1][n-1]:max(1,dp[i+1][n-1]-dungeon[i][n-1]));
        }

        return fun(0,0,dungeon);
    }
};